#include "Global.inc"
#include "SaveLoad.inc"

import java.io.*;

public final class Cartridge {
	// the size of the ROM banks in byte
	private static final int ROM_BANK_SIZE = 0x4000;
	// size of the chunks in the memmap
	private static final int MEMMAP_SIZE = 0x1000;
	// max number of memmaps for rom/ram
	private static final int MAX_ROM_MM = 512<<2;
	private static final int MAX_RAM_MM = 32<<1;

	protected BTYPE[][] MM_ROM = new BTYPE[MAX_ROM_MM][];
	protected BTYPE[][] MM_RAM = new BTYPE[MAX_RAM_MM][];;
	protected BTYPE[] BIOS_ROM = new BTYPE[0x100];

	public void loadBios(String filename) {
		for(int i = 0 ; i < 0x100 ; ++i) BIOS_ROM[i] = I2B(0);
		new Bios(filename, BIOS_ROM);
	}

	protected int rom_mm_size;
	protected int ram_mm_size;

	private String  file_name;
	private String  err_msg;            // message in case of an error
	private String  title;              // Internal name of the ROM

	protected int MBC;                    // The MBC used in the cartridge

	private boolean ram_enabled = false;// Whether RAM is enabled to read and write
	private boolean RTCRegisterEnabled=false;
	private int RomRamModeSelect=0; // 0 = rom, 1=ram
	protected int     CurrentROMBank = 1;    // The ROM bank to read/write
	protected int     CurrentRAMBank = 0;    // The RAM bank to read/write
	private int     CurrentRTCRegister=0;
	DataInputStream distream;

	private void handleIOException(IOException e) {
		PRINTLN("error loading cartridge from file!: " + e.toString());
		status = STATUS_FATAL_ERROR;
		err_msg = e.getMessage();
		if(e instanceof EOFException) {
			err_msg = "This ROM image should have " + (rom_mm_size>>2) + " banks of data,\nbut not all banks appear to be present in the ROM image.\nJGBE will try to emulate the ROM regardless, but beware\nthat this may cause the ROM to lockup or crash.";
			status = STATUS_NONFATAL_ERROR;
		}
		if(err_msg == null) err_msg = "Java Error messages are useless! (UNKNOWN_ERROR)";
	}

	public Cartridge(InputStream is) {
		try {
			file_name = "";
			distream = new DataInputStream(is);
			loadFromStream();
		}
		catch (java.io.IOException e) { handleIOException(e); }
	}

	public Cartridge(String file_name) {
		/**
		 * constructs a new instance of Cartridge
		 * pre:  fileName is the name of a cartridge
		 * post: f an error occurred while loading
		 *         getError() contains the gives the message of the error
		 *       else
		 *         the cartridge is loaded into memory
		 */
		this.file_name = file_name;
		distream = null;
		try {
			distream = FHandler.getDataInputStream(file_name);
			loadFromStream();
		}
		catch (java.io.IOException e) { handleIOException(e); }

/*#ifdef USE_JAVA_MOBILE
		loadBios("/boot.rom");
#else
		loadBios("boot.rom");
#endif*/
	PRINTFREEMEM("cartridge.create done");
	}

	SAVELOAD_FUNCTION {
		boolean isnull = false;
		for (int t = 0; t < MAX_RAM_MM; ++t) {
			if (SL_SAVE)
				isnull = (MM_RAM[t] == null);
			SL_BOOL(isnull);
			if (!isnull)
				SL_ARR(UINT8B, MM_RAM[t], MEMMAP_SIZE)
			else if (SL_LOAD)
				MM_RAM[t] = null;
		}

		SL_ARR(UINT8B, BIOS_ROM, 0x100); // not really needed as it is RO?
		//SL_INT(MBC); // should be correct already?

		SL_BOOL(ram_enabled);
		SL_BOOL(RTCRegisterEnabled);
		SL_INT(RomRamModeSelect);
		SL_INT(CurrentROMBank);
		SL_INT(CurrentRAMBank);
		SL_INT(CurrentRTCRegister);
	}

	public static final int STATUS_OK             =                         0;
	public static final int STATUS_NONFATAL_ERROR = STATUS_OK             + 1;
	public static final int STATUS_FATAL_ERROR    = STATUS_NONFATAL_ERROR + 1;
	private int status = STATUS_OK;
	public int getStatus(String[] s) {
		/**
		 * getError returns the error message if an error has occured
		 * pre: -
		 * ret: Exception.getMessage()
		 */
		if(s.length > 0) {
			s[0] = err_msg;
		}
		return status;
	}

	public String getTitle() {
		return title;
	}

	private void loadFromStream() throws java.io.IOException {
		/**
		 * loadFromFile loads a cartidge from a file
		 * pre:  true
		 * post: if an error occurred
		 *         getError() contains a message describing the error
		 *       else
		 *         the cartidge is loaded into ROM/RAM
		 */
		/*
		 * load the first ROM bank of the cartridge into memory
		 * used to initialize RAM and ROM banks
		 */
		PRINTFREEMEM("cartridge1");
		MM_ROM[0] = new BTYPE[MEMMAP_SIZE]; // init first memmap chunk
		PRINTFREEMEM("cartridge2");
// 		PRINTLN("cartridge got distream="+distream);
		// load first memmap chunk into memory
		PRINTFREEMEM("cartridge3");
		for(int i = 0; i < MEMMAP_SIZE; ++i)
			MM_ROM[0][i] = I2B(distream.readUnsignedByte());

		// Detect MBC type
		PRINTF("Cartridge MBC type: 0x%02x - ",B2I(MM_ROM[0][0x0147]));
		switch(B2I(MM_ROM[0][0x0147])) {
			case 0x00: MBC=0; PRINTF("ROM ONLY"); break;
			case 0x01: MBC=1; PRINTF("MBC1"); break;
			case 0x02: MBC=1; PRINTF("MBC1+RAM"); break;
			case 0x03: MBC=1; PRINTF("MBC1+RAM+BATTERY"); break;
			case 0x05: MBC=2; PRINTF("MBC2"); break;
			case 0x06: MBC=2; PRINTF("MBC2+BATTERY"); break;
			case 0x08: MBC=0; PRINTF("ROM+RAM"); break;
			case 0x09: MBC=0; PRINTF("ROM+RAM+BATTERY"); break;
			case 0x0b: MBC=-1; PRINTF("MMM01"); break;
			case 0x0c: MBC=-1; PRINTF("MMM01+RAM"); break;
			case 0x0d: MBC=-1; PRINTF("MMM01+RAM+BATTERY"); break;
			case 0x0f: MBC=3; PRINTF("MBC3+TIMER+BATTERY"); break;
			case 0x10: MBC=3; PRINTF("MBC3+TIMER+RAM+BATTERY"); break;
			case 0x11: MBC=3; PRINTF("MBC3"); break;
			case 0x12: MBC=3; PRINTF("MBC3+RAM"); break;
			case 0x13: MBC=3; PRINTF("MBC3+RAM+BATTERY"); break;
			case 0x15: MBC=4; PRINTF("MBC4"); break;
			case 0x16: MBC=4; PRINTF("MBC4+RAM"); break;
			case 0x17: MBC=4; PRINTF("MBC4+RAM+BATTERY"); break;
			case 0x19: MBC=5; PRINTF("MBC5"); break;
			case 0x1a: MBC=5; PRINTF("MBC5+RAM"); break;
			case 0x1b: MBC=5; PRINTF("MBC5+RAM+BATTERY"); break;
			case 0x1c: MBC=5; PRINTF("MBC5+RUMBLE"); break;
			case 0x1d: MBC=5; PRINTF("MBC5+RUMBLE+RAM"); break;
			case 0x1e: MBC=5; PRINTF("MBC5+RUMBLE+RAM+BATTERY"); break;
			case 0xfc: MBC=-2; PRINTF("POCKET CAMERA"); break;
			case 0xfd: MBC=-5; PRINTF("BANDAI TAMA5"); break;
			case 0xfe: MBC=-42; PRINTF("HuC3"); break;
			case 0xff: MBC=-99; PRINTF("HuC1+RAM+BATTERY"); break;
			default:  MBC=-666; PRINTLN("*UNKNOWN*"); throw new java.io.IOException("unknown MBC type");
		}
		PRINTLN(" (MBC"+MBC+")");

		PRINTF("Cartridge contains a ");
		if(B2I(MM_ROM[0][0x0143]) == 0x80) {
			PRINTF("GameBoy/GameBoy Color compatible");
		}
		else if(B2I(MM_ROM[0][0x0143]) == 0xc0) { //  or GBC-only game
			PRINTF("GameBoy Color only");
		}
		else {
			PRINTF("GameBoy");
		}
		PRINTLN(" game");

		// Determine ROM size (need 4 memmap entries per bank)
		rom_mm_size = 0;
		switch(B2I(MM_ROM[0][0x0148]))	{
			case 0x00: rom_mm_size =   2 << 2; PRINTLN("ROM size = 32KByte (no ROM banking)"); break;
			case 0x01: rom_mm_size =   4 << 2; PRINTLN("ROM size = 64KByte (4 banks)"); break;
			case 0x02: rom_mm_size =   8 << 2; PRINTLN("ROM size = 128KByte (8 banks)"); break;
			case 0x03: rom_mm_size =  16 << 2; PRINTLN("ROM size = 256KByte (16 banks)"); break;
			case 0x04: rom_mm_size =  32 << 2; PRINTLN("ROM size = 512KByte (32 banks)"); break;
			case 0x05: rom_mm_size =  64 << 2; PRINTLN("ROM size = 1MByte (64 banks) - only 63 banks used by MBC1"); break;
			case 0x06: rom_mm_size = 128 << 2; PRINTLN("ROM size = 2MByte (128 banks) - only 125 banks used by MBC1"); break;
			case 0x07: rom_mm_size = 256 << 2; PRINTLN("ROM size = 4MByte (256 banks)"); break;
			case 0x08: rom_mm_size = 512 << 2; PRINTLN("ROM size = 8MByte (512 banks)"); break;
			case 0x52: rom_mm_size =  72 << 2; PRINTLN("ROM size = 1.1MByte (72 banks)"); break;
			case 0x53: rom_mm_size =  80 << 2; PRINTLN("ROM size = 1.2MByte (80 banks)"); break;
			case 0x54: rom_mm_size =  96 << 2; PRINTLN("ROM size = 1.5MByte (96 banks)"); break;
			default:
				PRINTF("WARNING: Non-standard ROM size! (MM_ROM[0][0x0148]=0x%02x=%d)\n",B2I(MM_ROM[0][0x0148]), B2I(MM_ROM[0][0x0148]));
				rom_mm_size=1; //FIXME: try to load as little as possible?
		} // switch(header[0x0148])

		// Determine RAM size (1 memmap entry per 4 KBytes (round up)
		ram_mm_size = 0;
		switch(B2I(MM_ROM[0][0x0149])) {
			case 0x00: ram_mm_size =  0; PRINTLN(MBC==2?"Cartridge has 512x4 bits of RAM":"Cartridge has no RAM"); break;
			case 0x01: ram_mm_size =  1; PRINTLN("Cartridge has 2KBytes of RAM"); break;
			case 0x02: ram_mm_size =  2; PRINTLN("Cartridge has 8Kbytes of RAM"); break;
			case 0x03: ram_mm_size =  8; PRINTLN("Cartridge has 32 KBytes of RAM (4 banks of 8KBytes each)"); break;
			case 0x04: ram_mm_size = 32; PRINTLN("Cartridge has 128 KBytes of RAM (16 banks of 8KBytes each)"); break;
			default:
				PRINTF("WARNING: Non-standard RAM size! (MM_ROM[0][0x0149]=0x%02x=%d)\n",B2I(MM_ROM[0][0x0149]), B2I(MM_ROM[0][0x0149]));
				ram_mm_size=32; //FIXME: Give it as much ram as possible?
		} // switch(header[0x0149])

		if((MBC==2)&&(ram_mm_size==0)) ram_mm_size=1; // MBC2 has 512x4bits RAM builtin

		title="";
		int title_len = ((B2I(MM_ROM[0][0x0143])) == 0) ? 16 : 15; // ROM names are shorter for CGB games
		for(int i=0; i<title_len; ++i) {
			if(B2I(MM_ROM[0][0x0134+i])==0) break;
			title+=(char)B2I(MM_ROM[0][0x0134+i]);
		}
		PRINTLN("ROM Name appears to be `"+title+"'");

		// load entire ROM into memory
		PRINTF("Trying to load "+(rom_mm_size>>2)+" banks of ROM ");
		// First allocate memory, then fill it with data from distream.
		// This way we always have the appropriate number of banks available.
		for (int i = 1; i < rom_mm_size; ++i) {
			PRINTFREEMEM("cartidge");
			MM_ROM[i] = new BTYPE[MEMMAP_SIZE];
		}
		for (int i = 1; i < rom_mm_size; ++i) {
			PRINTF(".");
			for(int j = 0; j < MEMMAP_SIZE; ++j) {
				MM_ROM[i][j] = I2B(distream.readUnsignedByte());
			}
		}
		PRINTF("\n");

		distream.close(); // lets be nice :-p
		distream = null;

		// initing RAM
		for (int i = 0; i < ram_mm_size; ++i)
			MM_RAM[i] = new BTYPE[MEMMAP_SIZE];

		// for protection against roms access outside of valid address space
		BTYPE dummy_mm[] = new BTYPE[MEMMAP_SIZE];
		//for (int i = rom_mm_size; i < MAX_ROM_MM; ++i)
		//	MM_ROM[i] = dummy_mm;
		//for (int i = ram_mm_size; i < MAX_RAM_MM; ++i)
		//	MM_RAM[i] = dummy_mm;
	}

	public int read(int index) {
		switch(MBC) {
			case 1:
			case 2:
				if(ram_enabled) {
					if((index>=0xa000)&&(index<0xa200)) {
						return B2I(MM_RAM[0][index&0xfff])&0xf;
					}
				}
				else {
					PRINTLN("Warning: Reading from disabled RAM!");
					return 0; //Default to NOP?
				}
				PRINTF("Warning: Reading from bogus address: $%04x\n",index);
				return 0xff; //Default to RST38?
			case 3:
				//MBC3 TODO: RTC CRAP
				PRINTF("Error: not using memmap, or reading from cartridge with a noncartridge address $%04x\n", index);
				PRINTF("CurRombank: %d CurrentRAMBank: %d\n", CurrentROMBank, CurrentRAMBank);

				int x[]=null;
				x[0] = 0;
				return 0xff;
			case 5:
				// MBC5
				PRINTLN("Error: not using memmap, or reading from cartridge with a non cartridge address!");
				return 0xff;
			default:
				PRINTLN("Error: Cartridge memory bank controller type #"+ MBC +" is not implemented!");
				return 0xff;
		}
	}

	public void write(int index, int value) {        // TODO fatsoenlijk
		switch (MBC) {
			case 1:
				// MBC1
				if ((index>=0x0000) && (index <0x2000)) { // RAM Enable
					ram_enabled = false;
					if ((value&0x0f) == 0x0A) ram_enabled = true; // 0x0Ah enable
// 					PRINTF("Setting ram_enabled=%d value=$%02x value&$0a=$%02x PC=$%04x\n", ram_enabled?1:0, value, value&0x0a, CPU.PC);
				}
				else if(index<0x4000)  { // 2000-3FFF - ROM Bank Number (Write Only)
					int i=Math.max(1, value&0x1f);
//   					PRINTF("Change rombank bits 0-4: from %d to %d, value=%02x, PC=$%04x\n",CurrentROMBank, i,value, CPU.PC);
					CurrentROMBank &= ~0x1f; // clear bits 0-4
					CurrentROMBank |= i;     // set them with new value
					CurrentROMBank %= (rom_mm_size>>2);
					//PRINTLN("Selecting ROM bank"+CurrentROMBank);
				}
				else if(index<0x6000) { // 4000-5FFF - RAM Bank Number - or - Upper Bits of ROM Bank Number (Write Only)
					if(RomRamModeSelect==0) { //Select ROM
						int i,j,k;
 						i=(CurrentROMBank&0x1f)|((value&0x03)<<5);
						/*j=(CurrentROMBank&0x1f)|((value&0x03)<<4);
						k=(CurrentROMBank&0x0f)|((value&0x03)<<4);*/
//   						PRINTF("Change rombank bits 5-6: from %d to %d, value=%02x, PC=$%04x\n",CurrentROMBank, i, value,CPU.PC);
 						CurrentROMBank=i;
						CurrentROMBank %= (rom_mm_size>>2);
						//PRINTLN("Selecting ROM bank"+CurrentROMBank);
					}
					else { // Select RAM
						//not neccessary to take max(1, n) because there is only 1 slot where the rambanks may be mapped
						CurrentRAMBank=value&0x03;
						if (ram_mm_size == 0) {
							PRINTLN("WARNING! 'Bomberman Collection (J) [S]' hack'"+value);
							PRINTF("setting rom banks 0-15 to banks %d-%d\n", value*16, (value*16)+15);
							for (int i = 0; i < 64; ++i)
								MM_ROM[i] = MM_ROM[(value*64)|i];
						}
					}
				}
				else if(index<0x8000) { //6000-7FFF - ROM/RAM Mode Select (Write Only)
					RomRamModeSelect=value&1;
				}
				else if ((index>=0xA000) && (index <= 0xBFFF))	{ // Handled by MemMap
						// RAM Bank 00-03, if any
// 						PRINTF("TODO: MBC1 writing to RAM. index=$%04x, value=$%02x\n",index,value);
				}
				else PRINTF("TODO: Cartridge writing to $%04x\n", index); // TODO all option
				break;
			case 2:
				// MBC2
				// 0000-3FFF - ROM Bank 00 (Read Only)0000-3FFF - ROM Bank 00 (Read Only)
				// 4000-7FFF - ROM Bank 01-0F (Read Only)
				// A000-A1FF - 512x4bits RAM, built-in into the MBC2 chip (Read/Write)
				// 0000-1FFF - RAM Enable (Write Only)
				// 2000-3FFF - ROM Bank Number (Write Only)
				if ((0xA0000 <= index) && (index <= 0xA1FF))	{
					PRINTLN("TODO: write to internal cartridge RAM.");
				}
				else if ((0x0000 <= index) && (index <= 0x1FFF)) {
					if ((index & (1 << 8)) == 0) { // toggle RAM enabled
							ram_enabled = !ram_enabled;
// 							PRINTF("RAM is now "+(ram_enabled?"on":"off")+" index=$%04x index&(1<<4)=%d\n",index,index&(1<<4));
					}
				}
				else if ((0x2000 <= index) && (index <= 0x3FFFF))	{ //Select ROM Bank
					if ((index & (1 << 8)) != 0) { //The least significant bit of the upper address byte must be one to select a ROM bank
						value&=0xf;
						CurrentROMBank = MAX(value,1);
					}
				}
				break;
			case 3:
				// MBC3
				if((index>=0)&&(index<0x2000)) { //0000-1FFF - RAM and Timer Enable (Write Only)
					if ((value&0x0f) == 0x0A) ram_enabled = true; // 0x0Ah enable
					else ram_enabled = false;
				}
				if((index>=0x2000)&&(index<0x4000)) {//2000-3FFF - ROM Bank Number (Write Only)
					CurrentROMBank=Math.max(value&0x7f,1);
				}
				if((index>=0x4000)&&(index<0x6000)) { //4000-5FFF - RAM Bank Number - or - RTC Register Select (Write Only)
					if((value>=0)&&(value<0x4)) {
						RTCRegisterEnabled=false;
						CurrentRAMBank=value;
					}
					if((value>=0x08)&&(value<0x0c)) {
						RTCRegisterEnabled=true;
						CurrentRTCRegister=value-0x08;
					}
				}
				if((index>=0x6000)&&(index<0x8000)) { //6000-7FFF - Latch Clock Data (Write Only)
					PRINTLN("TODO: Cartridge.write(): Latch Clock Data!");
				}
				if((index>=0xa000) && (index<0xc000)){
					if(RTCRegisterEnabled) {
						PRINTLN("TODO: Cartridge.write(): writing to RAM in RTC mode");
					}
					else {
						PRINTLN("Error: not using memmap!");
					}
				}
				if(((index>=0x8000)&&(index<0xa000)) || ((index>0xc000))) PRINTF("WARNING: Cartridge.write(): Unsupported address for write ($%04x)\n",index);
				break;
/*			case 4:
				// MBC4
				PRINTLN("WARNING: Cartridge.write(): TODO: Implement MBC4");
				break;*/
			case 5:
				// MBC5
				if((index>=0)&&(index<0x2000)) { //0000-1FFF - RAM and Timer Enable (Write Only)
					if ((value&0x0f) == 0x0A) ram_enabled = true; // 0x0Ah enable
					else ram_enabled = false;
				}
				if((index>=0x2000)&&(index<0x3000)) {//2000-3FFF - ROM Bank Number (Write Only)
					CurrentROMBank &= 0x100;
					CurrentROMBank |= value;
				}
				if((index>=0x3000)&&(index<0x4000)) {//2000-3FFF - ROM Bank Number (Write Only)
					CurrentROMBank &= 0xff;
					CurrentROMBank |= (value&1) << 8;
				}
				if((index>=0x4000)&&(index<0x6000)) { //4000-5FFF - RAM Bank Number
					if (value < 0x10)
						CurrentRAMBank= value;
				}
				if((index>=0xa000) && (index<0xc000)){
					PRINTLN("Error: not using memmap!");
				}
				if(((index>=0x6000)&&(index<0xa000)) || ((index>0xc000))) PRINTF("WARNING: Cartridge.write(): Unsupported address for write ($%04x)\n",index);
				break;
			default:
				PRINTLN("ERROR: Cartridge.write(): Cartridge memory bank controller type #"+ MBC +" is not implemented");
		}
	}
}
